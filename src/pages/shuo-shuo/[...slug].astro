---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

/**
 * 获取所有说说内容用于静态生成
 * 支持多层路径如 2025/8/11.md
 */
export async function getStaticPaths() {
  const shuoShuoPosts = await getCollection('shuo-shuo');
  
  return shuoShuoPosts
    .filter(post => !post.data.draft)
    .map(post => ({
      params: { slug: post.slug },
      props: { post }
    }));
}

// 获取当前说说
const { post } = Astro.props;
const { Content } = await post.render();

/**
 * 格式化日期为中文格式（北京时间）
 * @param date - 日期对象
 * @returns 格式化后的日期字符串
 */
function formatDate(date: Date): string {
  // 直接使用已解析的北京时间
  return new Intl.DateTimeFormat('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
}

/**
 * 格式化日期为相对时间（基于北京时间）
 * @param date - 日期对象
 * @returns 相对时间描述
 */
function formatRelativeTime(date: Date): string {
  // 使用已解析的北京时间计算相对时间
  const now = new Date();
  const nowDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const targetDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  
  const diff = nowDate.getTime() - targetDate.getTime();
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  if (days === 0) return '今天';
  if (days === 1) return '昨天';
  if (days < 7) return `${days}天前`;
  if (days < 30) return `${Math.floor(days / 7)}周前`;
  if (days < 365) return `${Math.floor(days / 30)}个月前`;
  return `${Math.floor(days / 365)}年前`;
}

// 页面标题和描述
const title = post.data.title || '生活感悟';
const description = post.body?.substring(0, 150) || '记录生活点滴，分享美好瞬间';
---

<Layout title={`${title} - 说说`} description={description}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-950">
    <!-- 粘性顶部导航 -->
    <header class="sticky top-0 z-10 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
      <div class="  mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="flex items-center space-x-2 h-16 text-sm">
          <a href="/" class="inline-flex items-center text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
            </svg>
            首页
          </a>
          <span class="text-gray-400 dark:text-gray-600">/</span>
          <a href="/shuo-shuo" class="text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors">说说</a>
          <span class="text-gray-400 dark:text-gray-600">/</span>
          <span class="text-gray-900 dark:text-gray-100 truncate max-w-xs">{title}</span>
        </nav>
      </div>
    </header>

    <main class=" mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <article >
        <!-- 文章头部 -->
        <header class="px-6 sm:px-8 py-8 border-b border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
              <time 
                datetime={post.data.pubDate.toISOString()} 
                class="text-sm text-gray-500 dark:text-gray-400"
                title={formatDate(post.data.pubDate)}
              >
                {formatRelativeTime(post.data.pubDate)}
              </time>
              <span class="text-gray-400 dark:text-gray-600">•</span>
              <span class="text-sm text-gray-500 dark:text-gray-400">
                {formatDate(post.data.pubDate)}
              </span>
            </div>
          </div>
          
          {post.data.title && (
            <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white leading-tight">
              {post.data.title}
            </h1>
          )}

          <!-- 标签展示 -->
          {(post.data.tags && post.data.tags.length > 0) && (
            <div class="mt-4 flex flex-wrap gap-2">
              {post.data.tags.map((tag: string) => (
                <span 
                  key={tag}
                  class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
                >
                  #{tag}
                </span>
              ))}
            </div>
          )}
        </header>

        <!-- 图片展示区域 -->
        {post.data.images && post.data.images.length > 0 && (
          <div class="px-6 sm:px-8 pt-8">
            {post.data.images.length === 1 ? (
              <!-- 单张图片 -->
              <div class="relative overflow-hidden rounded-xl bg-gray-100 dark:bg-gray-900">
                <img 
                  src={post.data.images[0]} 
                  alt={post.data.title || '说说图片'}
                  class="w-full h-auto max-h-96 object-cover rounded-xl"
                  loading="lazy"
                />
              </div>
            ) : post.data.images.length === 2 ? (
              <!-- 两张图片并排 -->
              <div class="grid grid-cols-2 gap-4">
                {post.data.images.map((image: string, index: number) => (
                  <div key={index} class="relative overflow-hidden rounded-xl bg-gray-100 dark:bg-gray-900">
                    <img 
                      src={image} 
                      alt={`${post.data.title || '说说图片'} ${index + 1}`}
                      class="w-full h-64 object-cover rounded-xl hover:scale-105 transition-transform duration-200"
                      loading="lazy"
                    />
                  </div>
                ))}
              </div>
            ) : (
              <!-- 多张图片网格 -->
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {post.data.images.map((image: string, index: number) => (
                  <div key={index} class="relative overflow-hidden rounded-xl bg-gray-100 dark:bg-gray-900 group">
                    <img 
                      src={image} 
                      alt={`${post.data.title || '说说图片'} ${index + 1}`}
                      class="w-full h-48 object-cover rounded-xl group-hover:scale-105 transition-transform duration-200"
                      loading="lazy"
                    />
                    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-200 rounded-xl"></div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        <!-- 文章内容 -->
        <div class="px-6 sm:px-8 py-8">
          <div class="prose prose-lg dark:prose-invert max-w-none">
            <Content />
          </div>
        </div>

        <!-- 元信息区域 -->
        {(post.data.category || post.data.location || post.data.mood) && (
          <div class="px-6 sm:px-8 py-6 bg-gray-50 dark:bg-gray-900/50 border-t border-gray-200 dark:border-gray-700">
            <div class="flex flex-wrap gap-4 text-sm text-gray-600 dark:text-gray-400">
              {post.data.category && (
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                  </svg>
                  <span>{post.data.category}</span>
                </div>
              )}
              {post.data.location && (
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <span>{post.data.location}</span>
                </div>
              )}
              {post.data.mood && (
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-9 4h10M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                  <span>{post.data.mood}</span>
                </div>
              )}
            </div>
          </div>
        )}

        <!-- 文章底部操作区 -->
        <footer class="px-6 sm:px-8 py-6 bg-gray-50 dark:bg-gray-900/50 border-t border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <div class="text-sm text-gray-500 dark:text-gray-400">
              <div>发布于 {formatDate(post.data.pubDate)}</div>
              <div class="text-xs mt-1">{formatRelativeTime(post.data.pubDate)}</div>
            </div>
            <div class="flex items-center space-x-4">
              <a 
                href="/shuo-shuo" 
                class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
              >
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
                返回列表
              </a>
            </div>
          </div>
        </footer>
      </article>
    </main>
  </div>
</Layout>