---
export interface Props {
  type?: 'spinner' | 'skeleton' | 'dots';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const { type = 'spinner', size = 'md', className = '' } = Astro.props;

const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-8 h-8',
  lg: 'w-12 h-12'
};
---

<div class={`flex items-center justify-center ${className}`}>
  {type === 'spinner' && (
    <div class={`${sizeClasses[size]} animate-spin rounded-full border-2 border-gray-300 border-t-blue-600`}></div>
  )}
  
  {type === 'dots' && (
    <div class="flex space-x-1">
      <div class={`${size === 'sm' ? 'w-1 h-1' : size === 'md' ? 'w-2 h-2' : 'w-3 h-3'} bg-blue-600 rounded-full animate-bounce`} style="animation-delay: -0.3s"></div>
      <div class={`${size === 'sm' ? 'w-1 h-1' : size === 'md' ? 'w-2 h-2' : 'w-3 h-3'} bg-blue-600 rounded-full animate-bounce`} style="animation-delay: -0.15s"></div>
      <div class={`${size === 'sm' ? 'w-1 h-1' : size === 'md' ? 'w-2 h-2' : 'w-3 h-3'} bg-blue-600 rounded-full animate-bounce`}></div>
    </div>
  )}
  
  {type === 'skeleton' && (
    <div class="w-full space-y-4">
      <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
      <div class="space-y-2">
        <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
        <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-5/6 animate-pulse"></div>
      </div>
    </div>
  )}
</div>

<style>
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes bounce {
  0%, 80%, 100% {
    transform: scale(0);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-bounce {
  animation: bounce 1.4s infinite ease-in-out both;
}
</style>